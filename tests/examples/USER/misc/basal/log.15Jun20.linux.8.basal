LAMMPS (15 Jun 2020)
############################################################################
# Input file for investigating twinning nucleation under uniaxial loading with basal plane vector analysis
# Christopher Barrett, March 2013
# This script requires a Mg pair potential file to be in the same directory.

# fname is the file name.  It is necessary for loops to work correctly. (See jump command)
variable fname index in.basal

######################################
# POTENTIAL VARIABLES
# lattice parameters and the minimum energy per atom which should be obtained with the current pair potential and homogeneous lattice
variable lx equal 3.181269601
variable b equal sqrt(3)
variable c equal sqrt(8/3)
variable ly equal ${b}*${lx}
variable ly equal 1.73205080756888*${lx}
variable ly equal 1.73205080756888*3.181269601
variable lz equal ${c}*${lx}
variable lz equal 1.63299316185545*${lx}
variable lz equal 1.63299316185545*3.181269601
variable pairlocation index almg.liu
variable pairstyle index eam/alloy/opt

######################################
# EQUILIBRATION/DEFORMATION VARIABLES
# eqpress = 10 bar = 1 MPa
# tstep (the timestep) is set to a default value of 0.001 (1 fs)
# seed randomizes the velocity
# srate is the rate of strain in 1/s
# Ndump is the number of timesteps in between each dump of the atom coordinates
variable tstep equal 0.001
variable seed equal 95812384
variable srate equal 1e9

######################################
# INITIALIZATION
units 		metal
dimension		3
boundary		s	s	s
atom_style		atomic

######################################
# ATOM BUILD
atom_modify map array

# lattice custom scale a1 "coordinates of a1" a2 "coordinates of a2" a3 "coordinates of a3" basis "atom1 coordinates" basis "atom2 coordinates" basis "atom3 coordinates" basis "atom4 coordinates" orient x "crystallagraphic orientation of x axis" orient y "crystallagraphic orientation of y axis" z "crystallagraphic orientation of z axis"
lattice custom 3.181269601 a1 1 0 0 a2 0 1.732050808 0 a3 0 0 1.632993162 basis 0.0 0.0 0.0 basis 0.5 0.5 0 basis 0 0.3333333 0.5 basis 0.5 0.833333 0.5 orient x 0 1 1 orient y 1 0 0 orient z 0 1 -1
Lattice spacing in x,y,z = 7.569657350637932 3.181269601 7.569657350637932
variable multiple equal 20
variable mx equal "v_lx*v_multiple"
variable my equal "v_ly*v_multiple"
variable mz equal "v_lz*v_multiple"

# the simulation region should be from 0 to a multiple of the periodic boundary in x, y and z.
region		whole block 0 ${mz} 0 ${mx} 0 ${my} units box
region		whole block 0 103.899830089032 0 ${mx} 0 ${my} units box
region		whole block 0 103.899830089032 0 63.62539202 0 ${my} units box
region		whole block 0 103.899830089032 0 63.62539202 0 110.202411630128 units box
create_box		2 whole
Created orthogonal box = (0.0 0.0 0.0) to (103.899830089032 63.62539202 110.202411630128)
  2 by 2 by 2 MPI processor grid
create_atoms 1 box basis 1 1 basis 2 1 basis 3 1 basis 4 1
Created 32823 atoms
  create_atoms CPU = 0.002 seconds

region fixed1 block INF INF INF INF INF 10 units box
region fixed2 block INF INF INF INF  100 INF units box
group lower region fixed1
3017 atoms in group lower
group upper region fixed2
3050 atoms in group upper
group boundary union upper lower
6067 atoms in group boundary
group mobile subtract all boundary
26756 atoms in group mobile

variable natoms equal "count(all)"
print "# of atoms are: ${natoms}"
# of atoms are: 32823

######################################
# INTERATOMIC POTENTIAL
pair_style	${pairstyle}
pair_style	eam/alloy/opt
pair_coeff	* * ${pairlocation} Mg Mg
pair_coeff	* * almg.liu Mg Mg

######################################
# COMPUTES REQUIRED
compute csym all centro/atom 12
compute eng all pe/atom
compute eatoms all reduce sum c_eng
compute basal all basal/atom

######################################
# MINIMIZATION
# Primarily adjusts the c/a ratio to value predicted by EAM potential
reset_timestep	0
thermo 1
thermo_style custom step pe c_eatoms
min_style cg
minimize	1e-15 1e-15 1000 2000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:191)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 8.68
  ghost atom cutoff = 8.68
  binsize = 4.34, bins = 24.0 15.0 26.0
  3 neighbor lists, perpetual/occasional/extra = 1 2 0
  (1) pair eam/alloy/opt, perpetual
      attributes: half, newton on
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute centro/atom, occasional
      attributes: full, newton on
      pair build: full/bin/atomonly
      stencil: full/bin/3d
      bin: standard
  (3) compute basal/atom, occasional
      attributes: full, newton on
      pair build: full/bin/atomonly
      stencil: full/bin/3d
      bin: standard
Per MPI rank memory allocation (min/avg/max) = 6.97 | 6.971 | 6.972 Mbytes
Step PotEng c_eatoms 
       0   -47765.363   -47765.363 
       1   -47777.259   -47777.259 
       2    -47781.05    -47781.05 
       3   -47782.753   -47782.753 
       4     -47783.8     -47783.8 
       5   -47784.848   -47784.848 
       6   -47785.675   -47785.675 
       7   -47786.435   -47786.435 
       8   -47787.057   -47787.057 
       9    -47787.63    -47787.63 
      10   -47787.947   -47787.947 
      11   -47788.245   -47788.245 
      12   -47788.692   -47788.692 
      13   -47788.882   -47788.882 
      14   -47789.031   -47789.031 
      15   -47789.302   -47789.302 
      16   -47789.492   -47789.492 
      17   -47789.615   -47789.615 
      18   -47789.767   -47789.767 
      19    -47789.91    -47789.91 
      20   -47790.016   -47790.016 
      21   -47790.115   -47790.115 
      22   -47790.214   -47790.214 
      23   -47790.297   -47790.297 
      24   -47790.363   -47790.363 
      25   -47790.422   -47790.422 
      26   -47790.476   -47790.476 
      27   -47790.522   -47790.522 
      28   -47790.563   -47790.563 
      29   -47790.599   -47790.599 
      30   -47790.634   -47790.634 
      31   -47790.672   -47790.672 
      32   -47790.708   -47790.708 
      33   -47790.749   -47790.749 
      34   -47790.802   -47790.802 
      35   -47790.865   -47790.865 
      36   -47790.935   -47790.935 
      37       -47791       -47791 
      38   -47791.047   -47791.047 
      39   -47791.089   -47791.089 
      40   -47791.127   -47791.127 
      41   -47791.152   -47791.152 
      42   -47791.175   -47791.175 
      43   -47791.193   -47791.193 
      44   -47791.208   -47791.208 
      45    -47791.22    -47791.22 
      46   -47791.233   -47791.233 
      47   -47791.244   -47791.244 
      48   -47791.256   -47791.256 
      49   -47791.267   -47791.267 
      50   -47791.281   -47791.281 
      51   -47791.296   -47791.296 
      52   -47791.314   -47791.314 
      53   -47791.332   -47791.332 
      54   -47791.348   -47791.348 
      55   -47791.363   -47791.363 
      56   -47791.378   -47791.378 
      57   -47791.392   -47791.392 
      58   -47791.404   -47791.404 
      59   -47791.419   -47791.419 
      60   -47791.435   -47791.435 
      61   -47791.453   -47791.453 
      62   -47791.473   -47791.473 
      63   -47791.489   -47791.489 
      64   -47791.507   -47791.507 
      65   -47791.535   -47791.535 
      66   -47791.561   -47791.561 
      67   -47791.584   -47791.584 
      68   -47791.602   -47791.602 
      69   -47791.623   -47791.623 
      70   -47791.643   -47791.643 
      71    -47791.67    -47791.67 
      72     -47791.7     -47791.7 
      73   -47791.742   -47791.742 
      74   -47791.812   -47791.812 
      75   -47791.916   -47791.916 
      76   -47792.054   -47792.054 
      77   -47792.182   -47792.182 
      78   -47792.313   -47792.313 
      79   -47792.456   -47792.456 
      80   -47792.612   -47792.612 
      81   -47792.758   -47792.758 
      82   -47792.921   -47792.921 
      83   -47793.087   -47793.087 
      84   -47793.245   -47793.245 
      85   -47793.412   -47793.412 
      86    -47793.61    -47793.61 
      87   -47793.845   -47793.845 
      88   -47794.111   -47794.111 
      89   -47794.411   -47794.411 
      90   -47794.726   -47794.726 
      91   -47795.057   -47795.057 
      92   -47795.365   -47795.365 
      93    -47795.66    -47795.66 
      94    -47795.96    -47795.96 
      95   -47796.251   -47796.251 
      96   -47796.521   -47796.521 
      97   -47796.773   -47796.773 
      98   -47796.997   -47796.997 
      99   -47797.183   -47797.183 
     100    -47797.35    -47797.35 
     101   -47797.505   -47797.505 
     102   -47797.649   -47797.649 
     103   -47797.784   -47797.784 
     104   -47797.922   -47797.922 
     105   -47798.056   -47798.056 
     106   -47798.204   -47798.204 
     107   -47798.367   -47798.367 
     108   -47798.496   -47798.496 
     109   -47798.606   -47798.606 
     110   -47798.734   -47798.734 
     111   -47798.834   -47798.834 
     112   -47798.955   -47798.955 
     113   -47799.074   -47799.074 
     114   -47799.201   -47799.201 
     115    -47799.33    -47799.33 
     116   -47799.467   -47799.467 
     117     -47799.6     -47799.6 
     118   -47799.733   -47799.733 
     119   -47799.881   -47799.881 
     120   -47800.022   -47800.022 
     121   -47800.158   -47800.158 
     122   -47800.275   -47800.275 
     123   -47800.394   -47800.394 
     124   -47800.514   -47800.514 
     125   -47800.631   -47800.631 
     126   -47800.742   -47800.742 
     127   -47800.846   -47800.846 
     128   -47800.955   -47800.955 
     129   -47801.065   -47801.065 
     130   -47801.167   -47801.167 
     131   -47801.269   -47801.269 
     132    -47801.36    -47801.36 
     133   -47801.451   -47801.451 
     134    -47801.56    -47801.56 
     135   -47801.661   -47801.661 
     136   -47801.742   -47801.742 
     137   -47801.842   -47801.842 
     138   -47801.926   -47801.926 
     139   -47802.011   -47802.011 
     140   -47802.097   -47802.097 
     141   -47802.179   -47802.179 
     142    -47802.27    -47802.27 
     143   -47802.371   -47802.371 
     144   -47802.467   -47802.467 
     145   -47802.564   -47802.564 
     146   -47802.689   -47802.689 
     147   -47802.817   -47802.817 
     148   -47802.954   -47802.954 
     149   -47803.105   -47803.105 
     150   -47803.203   -47803.203 
     151   -47803.329   -47803.329 
     152   -47803.368   -47803.368 
     153   -47803.431   -47803.431 
     154   -47803.482   -47803.482 
     155   -47803.531   -47803.531 
     156   -47803.568   -47803.568 
     157   -47803.623   -47803.623 
     158   -47803.701   -47803.701 
     159   -47803.743   -47803.743 
     160   -47803.786   -47803.786 
     161   -47803.841   -47803.841 
     162   -47803.891   -47803.891 
     163   -47803.958   -47803.958 
     164   -47804.007   -47804.007 
     165   -47804.045   -47804.045 
     166   -47804.079   -47804.079 
     167   -47804.099   -47804.099 
     168   -47804.132   -47804.132 
     169   -47804.164   -47804.164 
     170   -47804.173   -47804.173 
     171   -47804.179   -47804.179 
     172   -47804.183   -47804.183 
     173    -47804.19    -47804.19 
     174   -47804.195   -47804.195 
     175   -47804.199   -47804.199 
     176   -47804.204   -47804.204 
     177   -47804.209   -47804.209 
     178   -47804.214   -47804.214 
     179   -47804.218   -47804.218 
     180   -47804.221   -47804.221 
     181   -47804.222   -47804.222 
     182   -47804.224   -47804.224 
     183   -47804.226   -47804.226 
     184   -47804.228   -47804.228 
     185   -47804.229   -47804.229 
     186    -47804.23    -47804.23 
     187   -47804.231   -47804.231 
     188   -47804.232   -47804.232 
     189   -47804.232   -47804.232 
     190   -47804.233   -47804.233 
     191   -47804.233   -47804.233 
     192   -47804.234   -47804.234 
     193   -47804.235   -47804.235 
     194   -47804.235   -47804.235 
     195   -47804.236   -47804.236 
     196   -47804.236   -47804.236 
     197   -47804.236   -47804.236 
     198   -47804.237   -47804.237 
     199   -47804.237   -47804.237 
     200   -47804.237   -47804.237 
     201   -47804.237   -47804.237 
     202   -47804.237   -47804.237 
     203   -47804.237   -47804.237 
     204   -47804.238   -47804.238 
     205   -47804.238   -47804.238 
     206   -47804.238   -47804.238 
     207   -47804.238   -47804.238 
     208   -47804.238   -47804.238 
     209   -47804.238   -47804.238 
     210   -47804.238   -47804.238 
     211   -47804.239   -47804.239 
     212   -47804.239   -47804.239 
     213   -47804.239   -47804.239 
     214   -47804.239   -47804.239 
     215   -47804.239   -47804.239 
     216   -47804.239   -47804.239 
     217   -47804.239   -47804.239 
     218   -47804.239   -47804.239 
     219   -47804.239   -47804.239 
     220   -47804.239   -47804.239 
     221   -47804.239   -47804.239 
     222   -47804.239   -47804.239 
     223   -47804.239   -47804.239 
     224   -47804.239   -47804.239 
     225   -47804.239   -47804.239 
     226   -47804.239   -47804.239 
     227   -47804.239   -47804.239 
     228   -47804.239   -47804.239 
     229   -47804.239   -47804.239 
     230   -47804.239   -47804.239 
     231   -47804.239   -47804.239 
     232   -47804.239   -47804.239 
     233   -47804.239   -47804.239 
     234    -47804.24    -47804.24 
     235    -47804.24    -47804.24 
     236    -47804.24    -47804.24 
     237    -47804.24    -47804.24 
     238    -47804.24    -47804.24 
     239    -47804.24    -47804.24 
     240    -47804.24    -47804.24 
     241    -47804.24    -47804.24 
     242    -47804.24    -47804.24 
     243    -47804.24    -47804.24 
     244    -47804.24    -47804.24 
     245    -47804.24    -47804.24 
     246    -47804.24    -47804.24 
     247    -47804.24    -47804.24 
     248    -47804.24    -47804.24 
     249    -47804.24    -47804.24 
     250    -47804.24    -47804.24 
     251    -47804.24    -47804.24 
     252    -47804.24    -47804.24 
     253    -47804.24    -47804.24 
     254    -47804.24    -47804.24 
     255    -47804.24    -47804.24 
     256    -47804.24    -47804.24 
     257    -47804.24    -47804.24 
     258    -47804.24    -47804.24 
     259    -47804.24    -47804.24 
     260    -47804.24    -47804.24 
     261    -47804.24    -47804.24 
     262    -47804.24    -47804.24 
     263    -47804.24    -47804.24 
     264    -47804.24    -47804.24 
     265    -47804.24    -47804.24 
     266    -47804.24    -47804.24 
     267    -47804.24    -47804.24 
     268    -47804.24    -47804.24 
     269    -47804.24    -47804.24 
     270    -47804.24    -47804.24 
     271    -47804.24    -47804.24 
     272    -47804.24    -47804.24 
     273    -47804.24    -47804.24 
     274    -47804.24    -47804.24 
     275    -47804.24    -47804.24 
     276    -47804.24    -47804.24 
     277    -47804.24    -47804.24 
     278    -47804.24    -47804.24 
     279    -47804.24    -47804.24 
     280    -47804.24    -47804.24 
     281    -47804.24    -47804.24 
     282    -47804.24    -47804.24 
     283    -47804.24    -47804.24 
     284    -47804.24    -47804.24 
     285    -47804.24    -47804.24 
     286    -47804.24    -47804.24 
     287    -47804.24    -47804.24 
     288    -47804.24    -47804.24 
     289    -47804.24    -47804.24 
     290    -47804.24    -47804.24 
     291    -47804.24    -47804.24 
     292    -47804.24    -47804.24 
     293    -47804.24    -47804.24 
     294    -47804.24    -47804.24 
     295    -47804.24    -47804.24 
     296    -47804.24    -47804.24 
     297    -47804.24    -47804.24 
     298    -47804.24    -47804.24 
     299    -47804.24    -47804.24 
     300    -47804.24    -47804.24 
     301    -47804.24    -47804.24 
     302    -47804.24    -47804.24 
     303    -47804.24    -47804.24 
     304    -47804.24    -47804.24 
     305    -47804.24    -47804.24 
     306    -47804.24    -47804.24 
     307    -47804.24    -47804.24 
     308    -47804.24    -47804.24 
     309    -47804.24    -47804.24 
     310    -47804.24    -47804.24 
     311    -47804.24    -47804.24 
     312    -47804.24    -47804.24 
     313    -47804.24    -47804.24 
     314    -47804.24    -47804.24 
     315    -47804.24    -47804.24 
     316    -47804.24    -47804.24 
     317    -47804.24    -47804.24 
     318    -47804.24    -47804.24 
     319    -47804.24    -47804.24 
     320    -47804.24    -47804.24 
     321    -47804.24    -47804.24 
     322    -47804.24    -47804.24 
     323    -47804.24    -47804.24 
     324    -47804.24    -47804.24 
     325    -47804.24    -47804.24 
     326    -47804.24    -47804.24 
     327    -47804.24    -47804.24 
     328    -47804.24    -47804.24 
     329    -47804.24    -47804.24 
     330    -47804.24    -47804.24 
     331    -47804.24    -47804.24 
     332    -47804.24    -47804.24 
     333    -47804.24    -47804.24 
     334    -47804.24    -47804.24 
     335    -47804.24    -47804.24 
     336    -47804.24    -47804.24 
     337    -47804.24    -47804.24 
     338    -47804.24    -47804.24 
     339    -47804.24    -47804.24 
     340    -47804.24    -47804.24 
     341    -47804.24    -47804.24 
     342    -47804.24    -47804.24 
     343    -47804.24    -47804.24 
     344    -47804.24    -47804.24 
     345    -47804.24    -47804.24 
     346    -47804.24    -47804.24 
     347    -47804.24    -47804.24 
     348    -47804.24    -47804.24 
     349    -47804.24    -47804.24 
     350    -47804.24    -47804.24 
     351    -47804.24    -47804.24 
     352    -47804.24    -47804.24 
     353    -47804.24    -47804.24 
     354    -47804.24    -47804.24 
     355    -47804.24    -47804.24 
     356    -47804.24    -47804.24 
     357    -47804.24    -47804.24 
     358    -47804.24    -47804.24 
     359    -47804.24    -47804.24 
     360    -47804.24    -47804.24 
     361    -47804.24    -47804.24 
     362    -47804.24    -47804.24 
     363    -47804.24    -47804.24 
     364    -47804.24    -47804.24 
     365    -47804.24    -47804.24 
     366    -47804.24    -47804.24 
     367    -47804.24    -47804.24 
     368    -47804.24    -47804.24 
     369    -47804.24    -47804.24 
     370    -47804.24    -47804.24 
Loop time of 10.015 on 8 procs for 370 steps with 32823 atoms

98.8% CPU use with 8 MPI tasks x no OpenMP threads

Minimization stats:
  Stopping criterion = energy tolerance
  Energy initial, next-to-last, final = 
     -47765.3632223354  -47804.2397337671  -47804.2397337671
  Force two-norm initial, final = 6.7769578784160664 2.4070789606000178e-05
  Force max component initial, final = 0.21871164717957287 3.7637499083610464e-06
  Final line search alpha, max atom move = 1.0 3.7637499083610464e-06
  Iterations, force evaluations = 370 636

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 7.6367     | 8.3661     | 8.773      |  12.9 | 83.54
Neigh   | 0.11524    | 0.12959    | 0.15086    |   3.3 |  1.29
Comm    | 0.86362    | 1.2741     | 2.0158     |  33.7 | 12.72
Output  | 0.05743    | 0.058856   | 0.066267   |   1.2 |  0.59
Modify  | 0          | 0          | 0          |   0.0 |  0.00
Other   |            | 0.1863     |            |       |  1.86

Nlocal:    4102.875 ave 4237.0 max 3960.0 min
Histogram: 1 1 2 0 0 0 0 1 1 2
Nghost:    2921.125 ave 3045.0 max 2799.0 min
Histogram: 2 2 0 0 0 0 0 0 2 2
Neighs:    244312.125 ave 252972.0 max 235251.0 min
Histogram: 2 1 1 0 0 0 0 2 0 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1954497
Ave neighs/atom = 59.54656795539713
Neighbor list builds = 13
Dangerous builds = 0
variable eminimum equal "c_eatoms / count(all)"
print "%%e(it,1)=${eminimum}"
%%e(it,1)=-1.45642505967667

######################################
# EQUILIBRATION
reset_timestep	0
timestep ${tstep}
timestep 0.001
# atoms are given a random velocity based on a temperature of 100K.
velocity all create 100 ${seed} mom yes rot no
velocity all create 100 95812384 mom yes rot no

# temperature and pressure are set to 100 and 0
fix 1 all nve

# Set thermo output
thermo 100
thermo_style custom step lx ly lz press pxx pyy pzz pe temp

# Run for at least 2 picosecond (assuming 1 fs timestep)
run 200
Per MPI rank memory allocation (min/avg/max) = 5.972 | 5.972 | 5.974 Mbytes
Step Lx Ly Lz Press Pxx Pyy Pzz PotEng Temp 
       0    104.64275    65.714342    110.11226    598.47213    597.01637    597.81151    600.58851    -47804.24          100 
     100    104.64275    65.714342    110.11226    410.24051    428.71994    361.69216    440.30941   -47600.368    51.958034 
     200    104.64275    65.714342    110.11226    319.66237    356.15439    292.32732    310.50539   -47572.062    45.287326 
Loop time of 2.65245 on 8 procs for 200 steps with 32823 atoms

Performance: 6.515 ns/day, 3.684 hours/ns, 75.402 timesteps/s
99.2% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.0688     | 2.2779     | 2.5381     |  10.0 | 85.88
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.081792   | 0.33911    | 0.54822    |  25.9 | 12.78
Output  | 0.00053821 | 0.00069822 | 0.00076473 |   0.0 |  0.03
Modify  | 0.011053   | 0.0148     | 0.020153   |   2.1 |  0.56
Other   |            | 0.01999    |            |       |  0.75

Nlocal:    4102.875 ave 4224.0 max 3988.0 min
Histogram: 1 1 0 1 1 2 0 0 0 2
Nghost:    2921.625 ave 3029.0 max 2825.0 min
Histogram: 2 0 1 1 0 1 0 1 1 1
Neighs:    244312.0 ave 253466.0 max 230836.0 min
Histogram: 1 0 2 0 0 0 0 3 0 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1954496
Ave neighs/atom = 59.54653748895591
Neighbor list builds = 0
Dangerous builds = 0

# Loop to run until pressure is below the variable eqpress (defined at beginning of file)
label loopeq
variable eq loop 100
run 250
Per MPI rank memory allocation (min/avg/max) = 5.972 | 5.972 | 5.974 Mbytes
Step Lx Ly Lz Press Pxx Pyy Pzz PotEng Temp 
     200    104.85745    65.870292    110.35759    317.54511    353.79543    290.39112    308.44879   -47572.062    45.287326 
     300    104.85745    65.870292    110.35759    39.146596     108.7739   -67.849967    76.515852   -47607.259    53.580797 
     400    104.85745    65.870292    110.35759    9.4983318    77.053439   -140.12154    91.563099   -47584.488    48.216239 
     450    104.85745    65.870292    110.35759   -89.400783    -71.05784   -183.61315   -13.531357   -47596.051        50.94 
Loop time of 3.28055 on 8 procs for 250 steps with 32823 atoms

Performance: 6.584 ns/day, 3.645 hours/ns, 76.207 timesteps/s
99.1% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.6792     | 2.875      | 3.1075     |   8.8 | 87.64
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.13372    | 0.36022    | 0.55642    |  24.5 | 10.98
Output  | 0.00046536 | 0.00052803 | 0.00061026 |   0.0 |  0.02
Modify  | 0.015226   | 0.018892   | 0.023517   |   1.8 |  0.58
Other   |            | 0.02595    |            |       |  0.79

Nlocal:    4102.875 ave 4187.0 max 4015.0 min
Histogram: 1 0 1 0 2 1 1 0 1 1
Nghost:    2920.75 ave 2987.0 max 2859.0 min
Histogram: 2 0 0 1 1 2 0 0 1 1
Neighs:    242686.5 ave 251809.0 max 233243.0 min
Histogram: 1 1 1 1 0 0 0 2 0 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1941492
Ave neighs/atom = 59.150351887396035
Neighbor list builds = 0
Dangerous builds = 0
variable converge equal press
if "${converge} <= 0" then "variable converge equal -press" else "variable converge equal press"
variable converge equal -press
if "${converge} <= 50" then "jump ${fname} breakeq"
next eq
jump ${fname} loopeq
jump in.basal loopeq
variable eq loop 100
run 250
Per MPI rank memory allocation (min/avg/max) = 5.972 | 5.972 | 5.974 Mbytes
Step Lx Ly Lz Press Pxx Pyy Pzz PotEng Temp 
     450    104.93751    65.816396    110.44649   -89.333767   -71.004573   -183.47551   -13.521214   -47596.051        50.94 
     500    104.93751    65.816396    110.44649   -128.13828   -107.02163   -228.78324   -48.609978   -47598.293    51.468216 
     600    104.93751    65.816396    110.44649   -153.68521   -114.97067   -298.29492   -47.790027   -47589.034    49.286859 
     700    104.93751    65.816396    110.44649   -241.42698   -241.19312   -368.16309   -114.92471   -47588.405     49.13863 
Loop time of 3.20001 on 8 procs for 250 steps with 32823 atoms

Performance: 6.750 ns/day, 3.556 hours/ns, 78.125 timesteps/s
99.2% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.5801     | 2.7778     | 3.0829     |  10.3 | 86.81
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.07989    | 0.38112    | 0.57812    |  27.5 | 11.91
Output  | 0.00049518 | 0.00053534 | 0.00062935 |   0.0 |  0.02
Modify  | 0.014247   | 0.017711   | 0.023282   |   2.1 |  0.55
Other   |            | 0.02281    |            |       |  0.71

Nlocal:    4102.875 ave 4214.0 max 3976.0 min
Histogram: 1 0 1 1 1 0 1 1 1 1
Nghost:    2923.375 ave 3008.0 max 2834.0 min
Histogram: 2 0 2 0 0 0 0 1 1 2
Neighs:    242674.25 ave 249776.0 max 234753.0 min
Histogram: 2 1 1 0 0 0 0 0 1 3
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1941394
Ave neighs/atom = 59.147366176156964
Neighbor list builds = 0
Dangerous builds = 0
variable converge equal press
if "${converge} <= 0" then "variable converge equal -press" else "variable converge equal press"
variable converge equal -press
if "${converge} <= 50" then "jump ${fname} breakeq"
next eq
jump ${fname} loopeq
jump in.basal loopeq
variable eq loop 100
run 250
Per MPI rank memory allocation (min/avg/max) = 5.972 | 5.972 | 5.974 Mbytes
Step Lx Ly Lz Press Pxx Pyy Pzz PotEng Temp 
     700    105.05598    65.774422    110.51837   -241.15167   -240.91808   -367.74326   -114.79366   -47588.405     49.13863 
     800    105.05598    65.774422    110.51837   -378.30449   -378.37917     -487.745   -268.78929    -47596.14    50.961339 
     900    105.07404    66.033126    110.48537   -357.57778   -344.37199   -492.95415    -235.4072     -47592.7    50.150808 
     950    105.07404    66.033126    110.48537   -359.48034   -352.15471   -497.10789   -229.17842   -47594.848    50.656896 
Loop time of 3.23182 on 8 procs for 250 steps with 32823 atoms

Performance: 6.684 ns/day, 3.591 hours/ns, 77.356 timesteps/s
99.3% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.5721     | 2.8522     | 2.9875     |   8.2 | 88.25
Neigh   | 0.0087232  | 0.01011    | 0.012155   |   1.1 |  0.31
Comm    | 0.19685    | 0.33123    | 0.61102    |  24.1 | 10.25
Output  | 0.0004621  | 0.00050684 | 0.00058835 |   0.0 |  0.02
Modify  | 0.013971   | 0.018207   | 0.020082   |   1.4 |  0.56
Other   |            | 0.01961    |            |       |  0.61

Nlocal:    4102.875 ave 4238.0 max 3960.0 min
Histogram: 1 1 1 1 0 0 1 1 1 1
Nghost:    2923.0 ave 3040.0 max 2808.0 min
Histogram: 2 1 1 0 0 0 0 0 2 2
Neighs:    242540.25 ave 250164.0 max 233729.0 min
Histogram: 1 2 1 0 0 0 0 0 2 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1940322
Ave neighs/atom = 59.11470615117448
Neighbor list builds = 1
Dangerous builds = 0
variable converge equal press
if "${converge} <= 0" then "variable converge equal -press" else "variable converge equal press"
variable converge equal -press
if "${converge} <= 50" then "jump ${fname} breakeq"
next eq
jump ${fname} loopeq
jump in.basal loopeq
variable eq loop 100
run 250
Per MPI rank memory allocation (min/avg/max) = 5.972 | 5.973 | 5.974 Mbytes
Step Lx Ly Lz Press Pxx Pyy Pzz PotEng Temp 
     950    104.97662    66.158489     110.4855   -359.13172   -351.81319    -496.6258   -228.95616   -47594.848    50.656896 
    1000    104.97662    66.158489     110.4855   -356.56572   -367.33138   -464.99676   -237.36902   -47589.171     49.31906 
    1100    104.97662    66.158489     110.4855   -355.51435   -386.08425   -409.38312   -271.07569   -47592.485    50.099914 
    1200    104.97322    66.139626    110.27684   -282.06012   -328.28777   -328.30878   -189.58381   -47594.758    50.635616 
Loop time of 3.21062 on 8 procs for 250 steps with 32823 atoms

Performance: 6.728 ns/day, 3.567 hours/ns, 77.867 timesteps/s
99.2% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.6166     | 2.8202     | 2.9568     |   8.2 | 87.84
Neigh   | 0.0087306  | 0.01023    | 0.012187   |   1.2 |  0.32
Comm    | 0.20146    | 0.34066    | 0.54053    |  23.6 | 10.61
Output  | 0.00051998 | 0.00057579 | 0.00065255 |   0.0 |  0.02
Modify  | 0.015184   | 0.018317   | 0.020084   |   1.3 |  0.57
Other   |            | 0.0206     |            |       |  0.64

Nlocal:    4102.875 ave 4241.0 max 3954.0 min
Histogram: 1 1 1 1 0 0 1 0 1 2
Nghost:    2916.625 ave 3037.0 max 2790.0 min
Histogram: 2 1 1 0 0 0 0 1 1 2
Neighs:    242557.875 ave 251295.0 max 233335.0 min
Histogram: 1 2 1 0 0 0 0 2 0 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1940463
Ave neighs/atom = 59.119001919385795
Neighbor list builds = 1
Dangerous builds = 0
variable converge equal press
if "${converge} <= 0" then "variable converge equal -press" else "variable converge equal press"
variable converge equal -press
if "${converge} <= 50" then "jump ${fname} breakeq"
next eq
jump ${fname} loopeq
jump in.basal loopeq
variable eq loop 100
run 250
Per MPI rank memory allocation (min/avg/max) = 5.972 | 5.973 | 5.974 Mbytes
Step Lx Ly Lz Press Pxx Pyy Pzz PotEng Temp 
    1200    104.96284    66.109182    110.29485   -282.17184    -328.4178   -328.43881    -189.6589   -47594.758    50.635616 
    1300    104.96284    66.109182    110.29485   -94.190744   -188.78276   -55.830674   -37.958801   -47593.372    50.309132 
    1400    104.96284    66.109182    110.29485   -37.777559   -201.34168    162.26041   -74.251402   -47593.755    50.399146 
    1450    104.96284    66.109182    110.29485   -30.195154   -202.11299      188.941   -77.413473   -47591.803    49.939333 
Loop time of 3.23441 on 8 procs for 250 steps with 32823 atoms

Performance: 6.678 ns/day, 3.594 hours/ns, 77.294 timesteps/s
99.1% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.5759     | 2.8245     | 3.0295     |   8.2 | 87.33
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.16731    | 0.36975    | 0.61512    |  22.6 | 11.43
Output  | 0.0005332  | 0.00059254 | 0.00073194 |   0.0 |  0.02
Modify  | 0.013617   | 0.018304   | 0.022577   |   1.9 |  0.57
Other   |            | 0.02123    |            |       |  0.66

Nlocal:    4102.875 ave 4202.0 max 3969.0 min
Histogram: 1 0 1 0 1 1 1 0 2 1
Nghost:    2923.5 ave 2997.0 max 2815.0 min
Histogram: 1 1 0 0 2 0 0 0 2 2
Neighs:    242562.625 ave 250161.0 max 234194.0 min
Histogram: 2 1 1 0 0 0 0 0 1 3
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1940501
Ave neighs/atom = 59.12015964415197
Neighbor list builds = 0
Dangerous builds = 0
variable converge equal press
if "${converge} <= 0" then "variable converge equal -press" else "variable converge equal press"
variable converge equal -press
if "${converge} <= 50" then "jump ${fname} breakeq"
jump ${fname} breakeq
jump in.basal breakeq

# Store length for strain rate calculations
variable tmp equal "lx"
variable L0 equal ${tmp}
variable L0 equal 104.962835363315
print "Initial Length, L0: ${L0}"
Initial Length, L0: 104.962835363315
unfix 1

######################################
# DEFORMATION
reset_timestep	0
timestep ${tstep}
timestep 0.001

# Impose constant strain rate
variable srate1 equal "v_srate / 1.0e10"
velocity	upper set 0.0 NULL 0.0 units box
velocity        lower set 0.0 NULL 0.0 units box

fix 2 upper setforce 0.0 NULL 0.0
fix 3 lower setforce 0.0 NULL 0.0
fix 1 all nve

# Output strain and stress info to file
# for units metal, pressure is in [bars] = 100 [kPa] = 1/10000 [GPa]
# p2 is in GPa
variable strain equal "(lx - v_L0)/v_L0"
variable p1 equal "v_strain"
variable p2 equal "-pxz/10000"
variable p3 equal "lx"
variable p4 equal "temp"
variable p5 equal "pe"
variable p6 equal "ke"
fix def1 all print 100 "${p1} ${p2} ${p3} ${p4} ${p5} ${p6}" file output.def1.txt screen no
# Dump coordinates to file (for void size calculations)
dump 		1 all custom 1000 output.dump.* id x y z c_basal[1] c_basal[2] c_basal[3]

# Display thermo
thermo_style	custom step v_strain pxz lx temp pe ke
restart 50000 output.restart

# run deformation for 100000 timesteps (10% strain assuming 1 fs timestep and 1e9/s strainrate)
variable runtime equal 0
label loop
displace_atoms	all ramp x 0.0 ${srate1} z 10 100 units box
displace_atoms	all ramp x 0.0 0.1 z 10 100 units box
run		100
Per MPI rank memory allocation (min/avg/max) = 9.352 | 9.544 | 9.736 Mbytes
Step v_strain Pxz Lx Temp PotEng KinEng 
       0 0.0013983598   -156.85257    105.10961    43.696559   -47591.767      185.386 
     100 0.0013983598   -144.67415    105.10961    43.829042    -47592.33    185.94806 
Loop time of 1.25157 on 8 procs for 100 steps with 32823 atoms

Performance: 6.903 ns/day, 3.477 hours/ns, 79.900 timesteps/s
99.3% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 1.0059     | 1.1012     | 1.171      |   4.9 | 87.99
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.061604   | 0.13231    | 0.22754    |  14.3 | 10.57
Output  | 8.7196e-05 | 9.008e-05  | 9.2015e-05 |   0.0 |  0.01
Modify  | 0.0070294  | 0.0094304  | 0.010881   |   1.2 |  0.75
Other   |            | 0.008503   |            |       |  0.68

Nlocal:    4102.875 ave 4245.0 max 3951.0 min
Histogram: 1 1 1 1 0 0 1 0 1 2
Nghost:    2923.875 ave 3051.0 max 2804.0 min
Histogram: 2 1 1 0 0 0 0 1 1 2
Neighs:    242670.125 ave 251430.0 max 233391.0 min
Histogram: 1 2 0 1 0 0 0 2 0 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1941361
Ave neighs/atom = 59.14636078359687
Neighbor list builds = 0
Dangerous builds = 0
variable runtime equal ${runtime}+100
variable runtime equal 0+100
if "${runtime} < 300" then "jump ${fname} loop"
jump ${fname} loop
jump in.basal loop
displace_atoms	all ramp x 0.0 ${srate1} z 10 100 units box
displace_atoms	all ramp x 0.0 0.1 z 10 100 units box
run		100
Per MPI rank memory allocation (min/avg/max) = 9.352 | 9.544 | 9.736 Mbytes
Step v_strain Pxz Lx Temp PotEng KinEng 
     100 0.0016983002   -334.91553    105.14109    43.829042   -47592.202    185.94806 
     200 0.0016983002   -300.07257    105.14109    43.897455   -47592.492    186.23831 
Loop time of 1.3442 on 8 procs for 100 steps with 32823 atoms

Performance: 6.428 ns/day, 3.734 hours/ns, 74.393 timesteps/s
99.2% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 1.1301     | 1.1762     | 1.2242     |   3.3 | 87.50
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.099038   | 0.14769    | 0.19314    |   9.5 | 10.99
Output  | 6.6786e-05 | 7.0171e-05 | 7.4747e-05 |   0.0 |  0.01
Modify  | 0.0094567  | 0.010386   | 0.011714   |   0.8 |  0.77
Other   |            | 0.009853   |            |       |  0.73

Nlocal:    4102.875 ave 4248.0 max 3948.0 min
Histogram: 1 1 1 1 0 0 1 0 1 2
Nghost:    2919.875 ave 3054.0 max 2797.0 min
Histogram: 2 1 1 0 0 0 0 2 0 2
Neighs:    242747.625 ave 251393.0 max 233289.0 min
Histogram: 1 2 0 1 0 0 0 2 0 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1941981
Ave neighs/atom = 59.16524997715017
Neighbor list builds = 0
Dangerous builds = 0
variable runtime equal ${runtime}+100
variable runtime equal 100+100
if "${runtime} < 300" then "jump ${fname} loop"
jump ${fname} loop
jump in.basal loop
displace_atoms	all ramp x 0.0 ${srate1} z 10 100 units box
displace_atoms	all ramp x 0.0 0.1 z 10 100 units box
run		100
Per MPI rank memory allocation (min/avg/max) = 9.352 | 9.544 | 9.736 Mbytes
Step v_strain Pxz Lx Temp PotEng KinEng 
     200  0.002970499    -489.5296    105.27463    43.897455   -47592.283    186.23831 
     300  0.002970499   -456.40978    105.27463      44.1933   -47593.538    187.49346 
Loop time of 1.37943 on 8 procs for 100 steps with 32823 atoms

Performance: 6.263 ns/day, 3.832 hours/ns, 72.493 timesteps/s
99.1% CPU use with 8 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 1.0647     | 1.1725     | 1.2837     |   6.1 | 85.00
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.075755   | 0.18653    | 0.29417    |  15.2 | 13.52
Output  | 7.199e-05  | 7.647e-05  | 8.1812e-05 |   0.0 |  0.01
Modify  | 0.0072227  | 0.0099677  | 0.012421   |   1.5 |  0.72
Other   |            | 0.01038    |            |       |  0.75

Nlocal:    4102.875 ave 4248.0 max 3952.0 min
Histogram: 1 1 1 1 0 0 1 0 1 2
Nghost:    2924.375 ave 3052.0 max 2798.0 min
Histogram: 2 1 1 0 0 0 0 1 1 2
Neighs:    242836.125 ave 251404.0 max 233538.0 min
Histogram: 1 2 0 1 0 0 0 2 0 2
FullNghs:  0.0 ave 0.0 max 0.0 min
Histogram: 8 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1942689
Ave neighs/atom = 59.18682021753039
Neighbor list builds = 0
Dangerous builds = 0
variable runtime equal ${runtime}+100
variable runtime equal 200+100
if "${runtime} < 300" then "jump ${fname} loop"

######################################
# SIMULATION DONE
print "All done"
All done
Total wall time: 0:00:33
